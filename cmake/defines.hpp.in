// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#if _WIN32
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "garden/os.hpp"
#include "garden/arch.hpp"
#include "garden/simd.hpp"
#include "garden/malloc.hpp"
#include "math/version.hpp"

#include <filesystem>
#include <string_view>

namespace garden
{
	namespace fs = std::filesystem;
}

//******************************************************************************************************************
#define __GARDEN__
#define GARDEN_NAME_STRING "Garden"
#define GARDEN_VERSION_MAJOR @Garden_VERSION_MAJOR@
#define GARDEN_VERSION_MINOR @Garden_VERSION_MINOR@
#define GARDEN_VERSION_PATCH @Garden_VERSION_PATCH@
#define GARDEN_VERSION Version(GARDEN_VERSION_MAJOR, GARDEN_VERSION_MINOR, GARDEN_VERSION_PATCH)
#define GARDEN_VERSION_STRING "@Garden_VERSION@"
#define GARDEN_CURRENT_YEAR "@GARDEN_CURRENT_YEAR@"
#define GARDEN_LITTLE_ENDIAN @GARDEN_LITTLE_ENDIAN@
#define GARDEN_DEBUG @GARDEN_DEBUG@
#define GARDEN_EDITOR @GARDEN_EDITOR@
#define GARDEN_PACK_RESOURCES @GARDEN_PACK_RESOURCES@
#define GARDEN_GAPI_VALIDATIONS @GARDEN_GAPI_VALIDATIONS@
#define GARDEN_TRACY_PROFILER @GARDEN_TRACY_PROFILER@
#define GARDEN_NVIDIA_DLSS @GARDEN_NVIDIA_DLSS@

#define GARDEN_DS_POOL_COMBINED_SAMPLER_COUNT @GARDEN_DS_POOL_COMBINED_SAMPLER_COUNT@
#define GARDEN_DS_POOL_UNIFORM_BUFFER_COUNT @GARDEN_DS_POOL_UNIFORM_BUFFER_COUNT@
#define GARDEN_DS_POOL_STORAGE_IMAGE_COUNT @GARDEN_DS_POOL_STORAGE_IMAGE_COUNT@
#define GARDEN_DS_POOL_STORAGE_BUFFER_COUNT @GARDEN_DS_POOL_STORAGE_BUFFER_COUNT@
#define GARDEN_DS_POOL_INPUT_ATTACHMENT_COUNT @GARDEN_DS_POOL_INPUT_ATTACHMENT_COUNT@
#define GARDEN_DS_POOL_ACCEL_STRUCTURE_COUNT @GARDEN_DS_POOL_ACCEL_STRUCTURE_COUNT@

#if GARDEN_NVIDIA_DLSS
	#if @GARDEN_NVIDIA_DLSS_USE_PROJECT_ID@
	#define GARDEN_NVIDIA_DLSS_PROJECT_ID "@GARDEN_NVIDIA_DLSS_PROJECT_ID@"
	#else
	#define GARDEN_NVIDIA_DLSS_APPLICATION_ID @GARDEN_NVIDIA_DLSS_APPLICATION_ID@
	#endif
#endif

#if GARDEN_DEBUG || GARDEN_EDITOR
#define GARDEN_GIT_COMMIT "@GARDEN_GIT_COMMIT@"
#define GARDEN_GIT_SHA1 "@GARDEN_GIT_SHA1@"
#define GARDEN_GIT_DATE "@GARDEN_GIT_DATE@"
#endif

#if GARDEN_DEBUG
#define GARDEN_RESOURCES_PATH fs::path("@Garden_SOURCE_DIR@/resources")

#if GARDEN_OS_WINDOWS
#define __PRETTY_FUNCTION__ __FUNCSIG__
#endif

/**
 * @brief Prints error and aborts program if statement is not true.
 *
 * @param statement target statement
 * @param[in] message error message
 */
#define GARDEN_ASSERT_MSG(statement, message)                                \
{                                                                            \
	if (!(statement))                                                        \
	{                                                                        \
		std::string msg = message;                                           \
		printf("%s: (%s), function: %s, file: %s, line: %d.\n", msg.c_str(), \
			#statement, __PRETTY_FUNCTION__, __FILE__, __LINE__);            \
		fflush(stdout);                                                      \
		abort();                                                             \
	}                                                                        \
} (void)0
#else
/**
 * @brief Prints error and aborts program if statement is not true.
 *
 * @param statement target statement
 * @param[in] message error message
 */
#define GARDEN_ASSERT_MSG(statement, message) (void)0
#endif

/**
 * @brief Prints error and aborts program if statement is not true.
 * @param statement target statement
 */
#define GARDEN_ASSERT(statement) GARDEN_ASSERT_MSG(statement, "Assertion failed")