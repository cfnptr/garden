// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "common/normal-mapping.gsl"

localSize = 16, 16, 1;

uniform sampler2D srcBuffer;
uniform restrict writeonly image2D dstBuffer : unormR8G8B8A8;

void main()
{
	int2 pos = int2(gl.globalInvocationID.xy);
	if (any(greaterThanEqual(pos, imageSize(dstBuffer))))
		return;

	int2 samplePos = pos * 2;
	float4 s00 = texelFetch(srcBuffer, samplePos, 0);
	float4 s10 = texelFetch(srcBuffer, samplePos + int2(1, 0), 0);
	float4 s01 = texelFetch(srcBuffer, samplePos + int2(0, 1), 0);
	float4 s11 = texelFetch(srcBuffer, samplePos + int2(1, 1), 0);
	float3 normal = normalize((unpackNormal(s00.xyz) + unpackNormal(s10.xyz) + 
		unpackNormal(s01.xyz) + unpackNormal(s11.xyz)) * (1.0f / 4.0f));
	float w = (s00.w + s10.w + s01.w + s11.w) * (1.0f / 4.0f);
	imageStore(dstBuffer, pos, float4(packNormal(normal), w));
}