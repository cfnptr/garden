// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatic exposure average.
// Based on this: https://bruop.github.io/exposure/

#include "common/tone-mapping.gsl"

localSize = 256, 1, 1;

buffer restrict readonly Histogram
{
	uint32 data[];
} histogram;
buffer restrict Luminance
{
	// In Yxy color space.
	float avgLuminance;
	float exposure;
} luminance;

uniform pushConstants
{
	float minLogLum;
	float logLumRange;
	float pixelCount;
	float darkAdaptRate;
	float brightAdaptRate;
} pc;

shared uint32 histogramShared[256];

//**********************************************************************************************************************
void main()
{
	uint32 localIndex = gl.localInvocationIndex;
	uint32 binCount = histogram.data[localIndex];
	histogramShared[localIndex] = binCount * localIndex;
	barrier();

	// TODO: add subgroupVote implementation enabled by spec const.
	for (uint32 cutoff = (256 >> 1); cutoff > 0; cutoff >>= 1)
	{
		histogramShared[localIndex] += localIndex < cutoff ? histogramShared[localIndex + cutoff] : 0;
		barrier();
	}

	if (localIndex == 0)
	{
		float weightedLogAvg = (histogramShared[0] / max(pc.pixelCount - float(binCount), 1.0f)) - 1.0f;
		float weightedAvgLum = exp2(((weightedLogAvg * (1.0f / 254.0f)) * pc.logLumRange) + pc.minLogLum);
		float lastLuminance = luminance.avgLuminance;

		luminance.avgLuminance = lastLuminance + (weightedAvgLum - lastLuminance) *
			(weightedAvgLum > lastLuminance ? pc.brightAdaptRate : pc.darkAdaptRate);
		luminance.exposure = 1.0f / (luminance.avgLuminance * LUM_TO_EXP + 0.0001f);
	}
}