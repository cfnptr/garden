// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "common/brdf.gsl"
#include "common/normal-mapping.gsl"

localSize = 16, 16, 1;

uniform samplerCube
{
	filter = linear;
} skybox;

uniform writeonly restrict image2DArray specular : sfloatR16G16B16A16;

buffer restrict readonly Cache
{
	float4 lMip[];
} cache;

uniform pushConstants
{
	uint32 imageSize;
	uint32 sampleOffset;
	uint32 sampleCount;
	uint32 faceOffset;
	float weight;
} pc;

shared float4 lMipShared[256];

//**********************************************************************************************************************
void main()
{
	if (any(greaterThanEqual(gl.globalInvocationID.xy, uint2(pc.imageSize))))
		return;

	uint3 globalID = gl.globalInvocationID + uint3(0, 0, pc.faceOffset);
	float3 dir = coordsToDir(globalID, 1.0f / pc.imageSize);
	float3x3 tbn = approximateTBN(dir);
	// TODO: try to add blue noise random rotation. It may improve quality.

	uint32 localIndex = gl.localInvocationIndex;
	uint32 count = pc.sampleOffset + pc.sampleCount;
	float3 li = float3(0.0f);

	for (uint32 i = pc.sampleOffset; i < count; i += 256)
	{
		uint32 globalIndex = i + localIndex;
		if (globalIndex < count)
			lMipShared[localIndex] = cache.lMip[globalIndex];
		barrier();

		uint32 localCount = min(count - i, 256u);
		for (uint32 j = 0; j < localCount; j++)
		{
			float4 lMip = lMipShared[j];
			float3 l = tbn * lMip.xyz;
			float3 c0 = textureLod(skybox, l, lMip.w).rgb;
			li += c0 * lMip.z;
		}
		barrier();
	}

	float4 color = float4(li * pc.weight, 1.0f);
	imageStore(specular, int3(globalID), color);
}