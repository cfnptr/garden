// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Axis Aligned Bounding Box

#ifndef AABB_GSL
#define AABB_GSL

#include "common/ray.gsl"
#include "common/math.gsl"

struct Aabb
{
	float3 min;
	float3 max;
};

bool isInside(Aabb aabb, float3 point)
{
	return all(lessThanEqual(aabb.min, point)) && all(greaterThanEqual(aabb.max, point));
}
bool isInside(Aabb aabb, Aabb other)
{
	return all(lessThanEqual(aabb.min, other.min)) && all(greaterThanEqual(aabb.max, other.max));
}

float3 closestPoint(Aabb aabb, float3 point)
{
	return clamp(point, aabb.min, aabb.max);
}

//**********************************************************************************************************************
void raycast(Aabb aabb, Ray ray, out float3 tMin, out float3 tMax)
{
	float3 tBot = ray.direction * (aabb.min - ray.origin);
	float3 tTop = ray.direction * (aabb.max - ray.origin);
	tMin = min(tTop, tBot); tMax = max(tTop, tBot);
}
bool isIntersected(float2 hitPoints)
{
	// If tMax < 0.0f, ray is intersecting AABB, but whole AABB is behing us.
	return hitPoints.y > max(hitPoints.x, 0.0f);
}

float2 raycast2I(Aabb aabb, Ray ray)
{
	float3 tMin; float3 tMax; raycast(aabb, ray, tMin, tMax);
	float t0 = max(tMin); float t1 = min(tMax);
	return float2(t0, t1);
}
float2 raycast2(Aabb aabb, Ray ray)
{
	ray.direction = 1.0f / ray.direction;
	return raycast2I(aabb, ray);
}

float raycast1I(Aabb aabb, Ray ray)
{
	float2 t = raycast2I(aabb, ray);
	return isIntersected(t) ? t.x : FLOAT32_MAX;
}
float raycast1(Aabb aabb, Ray ray)
{
	ray.direction = 1.0f / ray.direction;
	return raycast1I(aabb, ray);
}

//**********************************************************************************************************************
float2 raycast2I(Aabb aabb, Ray ray, out float3 normal)
{
	float3 tMin; float3 tMax; raycast(aabb, ray, tMin, tMax);
	float t0 = max(tMin); float t1 = min(tMax);
	float3 axisMask = step(abs(t0 - tMin), float3(FLOAT_EPS6));
	normal = axisMask * -sign(ray.direction);
	return float2(t0, t1);
}
float2 raycast2(Aabb aabb, Ray ray, out float3 normal)
{
	ray.direction = 1.0f / ray.direction;
	return raycast2I(aabb, ray, normal);
}

float raycast1I(Aabb aabb, Ray ray, out float3 normal)
{
	float2 t = raycast2I(aabb, ray, normal);
	return isIntersected(t) ? t.x : FLOAT32_MAX;
}
float raycast1(Aabb aabb, Ray ray, out float3 normal)
{
	ray.direction = 1.0f / ray.direction;
	return raycast1I(aabb, ray, normal);
}

//**********************************************************************************************************************
float2 raycast2I(Aabb aabb, Ray ray, out uint32 sideIndex)
{
	float3 tMin; float3 tMax; raycast(aabb, ray, tMin, tMax);
	float t0 = max(tMin); float t1 = min(tMax);
	float3 axisMask = step(abs(t0 - tMin), float3(FLOAT_EPS6));
	float3 axisIndex = float3(0.0f, 2.0f, 4.0f);
	float3 directionOffset = step(float3(0.0f), -ray.direction);
	sideIndex = min(uint32(dot(axisMask, axisIndex + directionOffset)), 5u);
	return float2(t0, t1);
}
float2 raycast2(Aabb aabb, Ray ray, out uint32 sideIndex)
{
	ray.direction = 1.0f / ray.direction;
	return raycast2I(aabb, ray, sideIndex);
}

float raycast1I(Aabb aabb, Ray ray, out uint32 sideIndex)
{
	float2 t = raycast2I(aabb, ray, sideIndex);
	return isIntersected(t) ? t.x : FLOAT32_MAX;
}
float raycast1(Aabb aabb, Ray ray, out uint32 sideIndex)
{
	ray.direction = 1.0f / ray.direction;
	return raycast1I(aabb, ray, sideIndex);
}

#endif // AABB_GSL