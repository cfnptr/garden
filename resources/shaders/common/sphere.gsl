// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef SPHERE_GSL
#define SPHERE_GSL

#include "common/aabb.gsl"

struct Sphere
{
	float3 position;
	float radius;
};

float3 closestPoint(Sphere sphere, float3 point)
{
	float3 dir = normalize(point - sphere.position);
	return fma(dir, float3(sphere.radius), sphere.position);
}

bool isInside(Sphere sphere, float3 point)
{
	return length(sphere.position - point) < sphere.radius * sphere.radius;
}

bool isIntersected(Sphere a, Sphere b)
{
	float s = a.radius + b.radius;
	return length(a.position - b.position) <= s * s;
}
bool isIntersected(Sphere sphere, Aabb aabb)
{
	float3 closPos = closestPoint(aabb, sphere.position);
	return length(sphere.position - closPos) < sphere.radius * sphere.radius;
}

float2 raycast2(Sphere sphere, Ray ray)
{
	float3 l = ray.origin - sphere.position;
	float b = 2.0f * dot(ray.direction, l);
	float c = dot(l, l) - sphere.radius * sphere.radius;
	float discriminant = b * b - 4.0f * c;
	if (discriminant < 0.0f)
		return float2(-FLOAT32_MAX);

	float discrSqrt = sqrt(discriminant);
	return float2(-b - discrSqrt, -b + discrSqrt) * 0.5f;
}
bool raycast(Sphere sphere, Ray ray)
{
	return isIntersected(raycast2(sphere, ray));
}

#endif // RAY_GSL