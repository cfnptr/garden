// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Bidirectional Reflectance Distribution Function
// Based on this: https://google.github.io/filament/Filament.html

#ifndef BRDF_GSL
#define BRDF_GSL

#include "common/ibl.gsl"
#include "common/math.gsl"

#define MIN_ROUGHNESS 0.045f

float ggx(float noh, float roughness)
{
	float oneMinusNohSquared = 1.0f - noh * noh;
	float a = noh * roughness;
	float k = roughness / (oneMinusNohSquared + a * a);
	return k * k * M_1_PI;
}
float smithGGXCorrelated(float nov, float nol, float a)
{
	float a2 = a * a;
	float lambdaV = nol * sqrt(fma(nov - a2 * nov, nov, a2));
	float lambdaL = nov * sqrt(fma(nol - a2 * nol, nol, a2));
	return 0.5f / (lambdaV + lambdaL);
}

float schlick(float voh, float f0, float f90)
{
	return fma(pow(1.0f - voh, 5.0f), f90 - f0, f0);
}
float3 schlick(float voh, float3 f0, float f90)
{
	return fma(float3(pow(1.0f - voh, 5.0f)), f90 - f0, f0);
}

float lambert() { return M_1_PI; }

//**********************************************************************************************************************
float2 hammersley(uint32 index, float invSampleCount)
{
	const float tof = 0.5f / float(0x80000000u);
	uint32 bits = index;
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float2(float(index) * invSampleCount, float(bits) * tof);
}
float3 importanceSamplingNdfDggx(float2 u, float a)
{
	float a2 = a * a; float phi = float(2.0 * M_PI) * u.x;
	float cosTheta2 = (1.0f - u.y) / (1.0f + (a2 - 1.0f) * u.y);
	float cosTheta = sqrt(cosTheta2);
	float sinTheta = sqrt(1.0f - cosTheta2);
	return float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

float computeDielectricF0(float reflectance)
{
	return 0.16f * reflectance * reflectance;
}
float3 computeF0(float3 baseColor, float metallic, float reflectance)
{
	return baseColor * metallic + reflectance * (1.0f - metallic);
}
float3 computeDiffuseColor(float3 baseColor, float metallic)
{
	return baseColor * (1.0f - metallic);
}

float2 sampleDFG(sampler2D dfgLUT, float nov, float perceptualRoughness)
{
	return textureLod(dfgLUT, float2(nov, perceptualRoughness), 0.0f).xy;
}
float3 specularDFG(sampler2D dfgLUT, float nov, float perceptualRoughness, float3 f0)
{
	float2 dfg = sampleDFG(dfgLUT, nov, perceptualRoughness);
	return mix(dfg.xxx, dfg.yyy, f0);
}

float3 computeEnergyCompensation(sampler2D dfgLUT, float nov, float perceptualRoughness, float3 f0)
{
	float2 dfg = sampleDFG(dfgLUT, nov, perceptualRoughness);
	return fma(float3(1.0f / dfg.y - 1.0f), f0, float3(1.0f));
}

float specularAoLagarde(float nov, float visibility, float linearRoughness)
{
	return clamp(pow(nov + visibility, exp2(fma(linearRoughness, -16.0f, -1.0f))) - 1.0f + visibility, 0.0f, 1.0f);
}
float3 gtaoMultiBounce(float visibility, float3 albedo)
{
	float3 a = fma(albedo, float3( 2.0404f), float3(-0.3324f));
	float3 b = fma(albedo, float3(-4.7951f), float3( 0.6417f));
	float3 c = fma(albedo, float3( 2.7552f), float3( 0.6903f));
	return max(float3(visibility), ((visibility * a + b) * visibility + c) * visibility);
}

float3 computeReflectedVector(float linearRoughness, float3 normal, float3 reflected)
{
	return mix(reflected, normal, linearRoughness * linearRoughness);
}

//**********************************************************************************************************************
float iblRoughnessOneLevel(samplerCube iblSpecular)
{
	return textureQueryLevels(iblSpecular) - 1;
}
float perceptualRoughnessToLod(samplerCube iblSpecular, float perceptualRoughness)
{
	// The mapping below is a quadratic fit for log2(perceptualRoughness) + iblRoughnessOneLevel when
	// iblRoughnessOneLevel is 4. We found empirically that this mapping works very well for
	// a 256 cubemap with 5 levels used. But also scales well for other iblRoughnessOneLevel values.
	return iblRoughnessOneLevel(iblSpecular) * perceptualRoughness * (2.0 - perceptualRoughness);
}
float3 prefilteredRadiance(samplerCube iblSpecular, float3 r, float perceptualRoughness)
{
	float lod = perceptualRoughnessToLod(iblSpecular, perceptualRoughness);
	return textureLod(iblSpecular, r, lod).rgb;
}
float3 prefilteredRadiance(samplerCube iblSpecular, float3 r, float linearRoughness, float offset)
{
	float lod = iblRoughnessOneLevel(iblSpecular) * linearRoughness;
	return textureLod(iblSpecular, r, lod + offset).rgb;
}

float3 diffuseIrradiance(float3 normal, const float4 shBuffer[SH_COEFF_COUNT])
{
	float3 irradiance = shBuffer[0].xyz +
		shBuffer[1].xyz * (normal.y) + shBuffer[2].xyz * (normal.z) + shBuffer[3].xyz * (normal.x) +
		shBuffer[4].xyz * (normal.y * normal.x) +
		shBuffer[5].xyz * (normal.y * normal.z) +
		shBuffer[6].xyz * (3.0f * normal.z * normal.z - 1.0f) +
		shBuffer[7].xyz * (normal.z * normal.x) +
		shBuffer[8].xyz * (normal.x * normal.x - normal.y * normal.y);
	return max(irradiance, 0.0f);
}

float packRoughness(float linearRoughness) { return sqrt(linearRoughness); }
float unpackRoughness(float perceptualRoughness) { return perceptualRoughness * perceptualRoughness; }

float calcGgxLod(float perceptualRoughness, float distance, float ggxLodOffset)
{
	const float invLog2Sqrt5 = 0.8614f;
	float roughness = unpackRoughness(max(perceptualRoughness, MIN_ROUGHNESS));
	return (log2(roughness / max(distance, 1.0f)) + ggxLodOffset) * invLog2Sqrt5;
}

#endif // BRDF_GSL