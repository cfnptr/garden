// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Random Number Generators.
// Useful link: https://www.shadertoy.com/view/XlGcRh

#ifndef RANDOM_GSL
#define RANDOM_GSL

// Inigo Quilez - Integer Hash

uint32 iqint(uint32 n)
{
	n = (n << 13u) ^ n;
	return n * (n * n * 15731u + 789221u) + 1376312589u;
}
uint32 iqint(uint2 x)
{
	uint2 q = 1103515245u * ((x >> 1u) ^ (x.yx));
	return 1103515245u * ((q.x) ^ (q.y >> 3u));
}
uint3 iqint(uint3 x)
{
	const uint32 k = 1103515245u; // GLIB C
	x = ((x >> 8u) ^ x.yzx) * k;
	x = ((x >> 8u) ^ x.yzx) * k;
	x = ((x >> 8u) ^ x.yzx) * k;
	return x;
}

uint32 iqint(float f) { return iqint(floatBitsToUint(f)); }
uint32 iqint(float2 f) { return iqint(floatBitsToUint(f)); }
uint3 iqint(float3 f) { return iqint(floatBitsToUint(f)); }

//**********************************************************************************************************************
// https://www.pcg-random.org/
uint32 pcg(uint32 v)
{
	uint32 state = v * 747796405u + 2891336453u;
	uint32 word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
	return (word >> 22u) ^ word;
}
uint2 pcg(uint2 v)
{
	v = v * 1664525u + 1013904223u;
	v += v.yx * 1664525u;
	v = v ^ (v >> 16u);
	v += v.yx * 1664525u;
	return v ^ (v >> 16u);
}
uint3 pcg(uint3 v)
{
	v = v * 1664525u + 1013904223u;
	v += v.yzx * v.zxy;
	v ^= v >> 16u;
	v += v.yzx * v.zxy;
	return v;
}
uint3 pcg16(uint3 v)
{
	v = v * 12829u + 47989u;
	v += v.yzx * v.zxy;
	v += v.yzx * v.zxy;
	return v >> 16u;
}
uint4 pcg(uint4 v)
{
	v = v * 1664525u + 1013904223u;
	v += v.yzxy * v.wxyz;
	v ^= v >> 16u;
	v += v.yzxy * v.wxyz;
	return v;
}

uint32 pcg(float f) { return pcg(floatBitsToUint(f)); }
uint2 pcg(float2 f) { return pcg(floatBitsToUint(f)); }
uint3 pcg(float3 f) { return pcg(floatBitsToUint(f)); }
uint3 pcg16(float3 f) { return pcg16(floatBitsToUint(f)); }
uint4 pcg(float4 f) { return pcg(floatBitsToUint(f)); }

// Note: Returns random float in [0.0, 1.0] range.
float  toFloat01(uint32 hash) { return hash * (1.0f / float(0xffffffffu)); }
float2 toFloat01(uint2 hash)  { return hash * (1.0f / float(0xffffffffu)); }
float3 toFloat01(uint3 hash)  { return hash * (1.0f / float(0xffffffffu)); }
float4 toFloat01(uint4 hash)  { return hash * (1.0f / float(0xffffffffu)); }

// Note: Returns random float in [-1.0, 1.0] range.
float  toFloat11(uint32 hash) { return fma(toFloat01(hash), 2.0f, -1.0f); }
float2 toFloat11(uint2 hash)  { return fma(toFloat01(hash), float2(2.0f), float2(-1.0f)); }
float3 toFloat11(uint3 hash)  { return fma(toFloat01(hash), float3(2.0f), float3(-1.0f)); }
float4 toFloat11(uint4 hash)  { return fma(toFloat01(hash), float4(2.0f), float4(-1.0f)); }

#endif // RANDOM_GSL