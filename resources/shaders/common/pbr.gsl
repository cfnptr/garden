// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Physically Based Rendering

// Note: Material roughness is perceptual.
// roughness = perceptual * perceptual

// Reflectance
// 1.0  = Diamond (16%)
// 0.7  = Ruby    ( 8%)
// 0.5  = Common  ( 4%)
// 0.35 = Water   ( 2%)

#ifndef PBR_GSL
#define PBR_GSL

#include "common/brdf.gsl"
#include "common/light.gsl"
#include "common/gbuffer.gsl"

struct IblTerms
{
	float3 e;
	#ifndef USE_SPECULAR_ONLY
	float3 fd;
	#endif
	#ifndef USE_DIFFUSE_ONLY
	float3 fr;
	#endif
	#ifdef USE_LIGHT_EMISSION
	float3 fe;
	#endif
};

//**********************************************************************************************************************
IblTerms evaluateIBL(const GBufferValues gBuffer, sampler2D dfgLUT, const float4 shBuffer[SH_COEFF_COUNT]
	#ifndef USE_DIFFUSE_ONLY
	, samplerCube iblSpecular
	#endif
	)
{
	IblTerms terms;
	float roughness = max(gBuffer.roughness, MIN_ROUGHNESS); // Perceptual.
	float linearRoughness = unpackRoughness(roughness);
	float nov = max(dot(gBuffer.normal, -gBuffer.viewDirection), 1e-4f);
	float reflectance = computeDielectricF0(gBuffer.reflectance);
	float3 f0 = computeF0(gBuffer.baseColor, gBuffer.metallic, reflectance);
	terms.e = specularDFG(dfgLUT, nov, roughness, f0);

	#ifdef USE_REFLECTIONS
	float4 reflectionColor = gBuffer.reflectionColor;
	#else
	const float4 reflectionColor = float4(0.0f);
	#endif

	#ifndef USE_DIFFUSE_ONLY
	terms.fr = float3(0.0f);
	float3 energyCompensation = computeEnergyCompensation(dfgLUT, nov, roughness, f0);

	if (reflectionColor.a < 1.0f)
	{
		float3 reflected = reflect(gBuffer.viewDirection, gBuffer.normal);
		float3 r = computeReflectedVector(linearRoughness, gBuffer.normal, reflected);
		terms.fr = terms.e * prefilteredRadiance(iblSpecular, r, roughness) * energyCompensation;
	}
	#endif

	#ifdef USE_LIGHT_SHADOW
	float4 shadow = gBuffer.shadow;
	#else
	const float4 shadow = float4(1.0f);
	#endif

	#ifndef USE_SPECULAR_ONLY
	float3 irradiance = diffuseIrradiance(gBuffer.normal, shBuffer);
	#ifdef USE_GLOBAL_ILLUMINATION
	irradiance = mix(gBuffer.giColor, irradiance, shadow.a);
	#endif
	float3 diffuseColor = computeDiffuseColor(gBuffer.baseColor, gBuffer.metallic);
	terms.fd = diffuseColor * (1.0f - terms.e) * irradiance * shadow.rgb * lambert();
	#endif

	#if defined(USE_SUBSURFACE_SCATTERING) && !defined(USE_SPECULAR_ONLY)
	if (gBuffer.thickness < 1.0f && gBuffer.transmission == 0.0f)
	{
		float3 viewDependent = prefilteredRadiance(iblSpecular, 
			gBuffer.viewDirection, linearRoughness, 1.0 + gBuffer.thickness);
		float attenuation = (1.0 - gBuffer.thickness) / (2.0 * M_PI);
		terms.fd += gBuffer.subsurfaceColor * (irradiance + viewDependent) * attenuation;
		// If have cloth model:  fd *= clamp(gBuffer.subsurfaceColor + nov, 0.0f, 1.0f);
	}
	#endif

	#ifdef USE_AMBIENT_OCCLUSION
	if (gBuffer.ambientOcclusion < 1.0f)
	{
		float specularAO = specularAoLagarde(nov, gBuffer.ambientOcclusion, linearRoughness);
		#ifndef USE_SPECULAR_ONLY
		terms.fd *= gtaoMultiBounce(gBuffer.ambientOcclusion, diffuseColor);
		#endif
		#ifndef USE_DIFFUSE_ONLY
		terms.fr *= gtaoMultiBounce(specularAO, f0);
		#endif
	}
	#endif

	/// TODO: evaluateSheenIBL();

	#ifdef USE_CLEAR_COAT
	if (gBuffer.clearCoatRoughness > 0.0)
	{
		float clearCoatNov = max(dot(gBuffer.clearCoatNormal, -gBuffer.viewDirection), 1e-4f);
		float fc = schlick(0.04f, 1.0f, clearCoatNov);
		float attenuation = 1.0f - fc;
		#ifndef USE_SPECULAR_ONLY
		terms.fd *= attenuation;
		#endif
		
		#ifndef USE_DIFFUSE_ONLY
		float3 clearCoatR = reflect(gBuffer.viewDirection, gBuffer.clearCoatNormal);
		float clearCoatRoughness = max(gBuffer.clearCoatRoughness, MIN_ROUGHNESS); // Perceptual.
		float ccLinearRoughness = unpackRoughness(clearCoatRoughness);
			#ifdef USE_AMBIENT_OCCLUSION
			float specularAO = specularAoLagarde(
				clearCoatNov, gBuffer.ambientOcclusion, ccLinearRoughness);
			#else
			const float specularAO = 1.0f;
			#endif
		terms.fr = fma(terms.fr, float3(attenuation), prefilteredRadiance(
			iblSpecular, clearCoatR, clearCoatRoughness) * (specularAO * fc));
		#endif
    }
	#endif

	#ifdef USE_LIGHT_EMISSION
	terms.fe = gBuffer.emissiveColor * gBuffer.emissiveFactor;
		#ifndef USE_SPECULAR_FACTOR
		terms.fe *= gBuffer.baseAlpha;
		#endif
	#endif

	#if defined(USE_LIGHT_ABSORPTION) && !defined(USE_SPECULAR_ONLY)
	if (gBuffer.transmission > 0.0f)
	{
		float3 ft = gBuffer.refractedColor;
		ft *= min(float3(1.0f), exp(-gBuffer.absorptionColor * 
			gBuffer.thickness)) * (1.0f - terms.e) * gBuffer.transmission;
		terms.fd = fma(terms.fd, float3(1.0f - gBuffer.transmission), ft);
	}
	#endif

	#ifndef USE_DIFFUSE_ONLY
		#ifdef USE_REFLECTIONS
		terms.fr = fma(terms.fr, float3(1.0f - reflectionColor.a), 
			terms.e * reflectionColor.rgb * energyCompensation);
		#endif
		#ifdef USE_SPECULAR_FACTOR
		terms.fr *= gBuffer.specularFactor;
		#endif
	#endif
	return terms;
}

// TODO: support anisotropy shading model for brushed metals.

#endif // PBR_GSL