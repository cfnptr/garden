// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// TODO: add sheen G-Buffer?

#ifndef GBUFFER_GSL
#define GBUFFER_GSL

#include "common/math.gsl"

#define G_BUFFER_BASE_COLOR 0
#define G_BUFFER_SPEC_FACTOR 0
#define G_BUFFER_METALLIC 1
#define G_BUFFER_ROUGHNESS 1
#define G_BUFFER_MATERIAL_AO 1
#define G_BUFFER_REFLECTANCE 1
#define G_BUFFER_NORMALS 2
#define G_BUFFER_SHADOW 2
#define G_BUFFER_CC_NORMALS 3
#define G_BUFFER_CC_ROUGHNESS 3
#define G_BUFFER_EM_COLOR 4
#define G_BUFFER_EM_FACTOR 4
#define G_BUFFER_VELOCITY 5
#define G_BUFFER_COUNT 6

#define G_BUFFER_SPEC_FACTOR_COMP 3
#define G_BUFFER_METALLIC_COMP 0
#define G_BUFFER_ROUGHNESS_COMP 1
#define G_BUFFER_MATERIAL_AO_COMP 2
#define G_BUFFER_REFLECTANCE_COMP 3
#define G_BUFFER_CC_ROUGHNESS_COMP 0
#define G_BUFFER_SHADOW_COMP 0
#define G_BUFFER_EM_FACTOR_COMP 3

struct GBufferData
{
	float4 g[G_BUFFER_COUNT];
};
struct GBufferValues
{
	float3 viewDirection;
	float3 baseColor;
	#ifdef USE_SPECULAR_FACTOR
	float specularFactor;
	#else
	float baseAlpha;
	#endif
	float metallic;
	float roughness;
	#ifdef USE_AMBIENT_OCCLUSION
	float ambientOcclusion;
	#endif
	float reflectance;
	float3 normal;
	#ifdef USE_LIGHT_SHADOW
	float4 shadow;
	#endif
	#ifdef USE_LIGHT_ABSORPTION
	float3 refractedColor;
	float3 absorptionColor;
	float transmission;
	#endif
	#ifdef USE_CLEAR_COAT
	float3 clearCoatNormal;
	float clearCoatRoughness;
	#endif
	#ifdef USE_LIGHT_EMISSION
	float3 emissiveColor;
	float emissiveFactor;
	#endif
	#ifdef USE_SUBSURFACE_SCATTERING
	float3 subsurfaceColor;
	#endif
	#ifdef USE_REFLECTIONS
	float4 reflectionColor;
	#endif
	#ifdef USE_GLOBAL_ILLUMINATION
	float3 giColor;
	#endif
	#ifdef USE_MOTION_VECTORS
	float2 velocity;
	#endif
	#if defined(USE_LIGHT_ABSORPTION) || defined(USE_SUBSURFACE_SCATTERING)
	float thickness;
	#endif
};

GBufferValues gBufferValuesDefault()
{
	GBufferValues gBuffer;
	gBuffer.viewDirection = float3(0.0f, 0.0f, -1.0f);
	gBuffer.baseColor = float3(1.0f);
	#ifdef USE_SPECULAR_FACTOR
	gBuffer.specularFactor = 1.0f;
	#else
	gBuffer.baseAlpha = 1.0f;
	#endif
	gBuffer.metallic = 0.0f;
	gBuffer.roughness = 1.0f;
	#ifdef USE_AMBIENT_OCCLUSION
	gBuffer.ambientOcclusion = 1.0f;
	#endif
	gBuffer.reflectance = 0.5f;
	gBuffer.normal = float3(0.0f, 1.0f, 0.0f);
	#ifdef USE_LIGHT_SHADOW
	gBuffer.shadow = float4(1.0f);
	#endif
	#ifdef USE_LIGHT_ABSORPTION
	gBuffer.refractedColor = float3(0.0f);
	gBuffer.absorptionColor = float3(0.0f);
	gBuffer.transmission = 0.0f;
	#endif
	#ifdef USE_CLEAR_COAT
	gBuffer.clearCoatNormal = float3(0.0f, 0.0f, 1.0f);
	gBuffer.clearCoatRoughness = 0.0f;
	#endif
	#ifdef USE_LIGHT_EMISSION
	gBuffer.emissiveColor = float3(0.0f);
	gBuffer.emissiveFactor = 0.0f;
	#endif
	#ifdef USE_SUBSURFACE_SCATTERING
	gBuffer.subsurfaceColor = float3(0.0f);
	#endif
	#ifdef USE_REFLECTIONS
	gBuffer.reflectionColor = float4(0.0f);
	#endif
	#ifdef USE_GLOBAL_ILLUMINATION
	gBuffer.giColor = float3(1.0f);
	#endif
	#ifdef USE_MOTION_VECTORS
	gBuffer.velocity = float2(0.0f);
	#endif
	#if defined(USE_LIGHT_ABSORPTION) || defined(USE_SUBSURFACE_SCATTERING)
	gBuffer.thickness = 1.0f;
	#endif
	return gBuffer;
}

//**********************************************************************************************************************
// Signed Octahedron Normal Encoding (R10G10B10A2)
// https://johnwhite3d.blogspot.com/2017/10/signed-octahedron-normal-encoding.html

float3 encodeNormalOct(float3 normal)
{
	float3 encoded;
	normal /= (abs(normal.x) + abs(normal.y) + abs(normal.z));
	encoded.y = normal.y *  0.5f + 0.5f;
	encoded.x = normal.x *  0.5f + encoded.y;
	encoded.y = normal.x * -0.5f + encoded.y;
	encoded.z = clamp(normal.z * FLOAT32_MAX, 0.0f, 1.0f);
	return encoded;
}
float3 decodeNormalOct(float3 encoded)
{
	float3 normal;
	normal.x = (encoded.x - encoded.y);
	normal.y = (encoded.x + encoded.y) - 1.0f;
	normal.z = encoded.z * 2.0f - 1.0f;
	normal.z = normal.z * (1.0f - abs(normal.x) - abs(normal.y));
	return normalize(normal);
}

//**********************************************************************************************************************
float4 encodeGBuffer0(float3 baseColor, float specularFactor)
{
	return float4(baseColor, specularFactor);
}
float4 encodeGBuffer1(float metallic, float roughness, float ambientOcclusion, float reflectance)
{
	return float4(metallic, roughness, ambientOcclusion, reflectance);
}
float4 encodeGBuffer2(float3 normal, float shadow)
{
	float3 encodedNormal = encodeNormalOct(normal);
	return float4(shadow, encodedNormal.x, encodedNormal.y, encodedNormal.z);
}
float4 encodeGBuffer3(float3 clearCoatNormal, float clearCoatRoughness)
{
	float3 encodedNormal = encodeNormalOct(clearCoatNormal);
	return float4(clearCoatRoughness, encodedNormal.x, encodedNormal.y, encodedNormal.z);
}
float4 encodeGBuffer4(float3 emissiveColor, float emissiveFactor)
{
	return float4(emissiveColor, emissiveFactor);
}
float4 encodeGBuffer5(float2 velocity)
{
	return float4(velocity, float2(0.0f));
}

void encodeGBufferValues(const GBufferValues gBuffer, out float4 g0, 
	out float4 g1, out float4 g2, out float4 g3, out float4 g4, out float4 g5)
{
	#ifdef USE_SPECULAR_FACTOR
	float specularFactor = gBuffer.specularFactor;
	#else
	float specularFactor = gBuffer.baseAlpha;
	#endif
	g0 = encodeGBuffer0(gBuffer.baseColor, specularFactor);
	#ifdef USE_AMBIENT_OCCLUSION
	float ambientOcclusion = gBuffer.ambientOcclusion;
	#else
	const float ambientOcclusion = 1.0f;
	#endif
	g1 = encodeGBuffer1(gBuffer.metallic, gBuffer.roughness, ambientOcclusion, gBuffer.reflectance);
	#ifdef USE_LIGHT_SHADOW
	float shadow = gBuffer.shadow.a;
	#else
	const float shadow = 1.0f;
	#endif
	g2 = encodeGBuffer2(gBuffer.normal, shadow);
	#ifdef USE_CLEAR_COAT
	if (USE_CLEAR_COAT_BUFFER)
		g3 = encodeGBuffer3(gBuffer.clearCoatNormal, gBuffer.clearCoatRoughness);
	#endif
	#ifdef USE_LIGHT_EMISSION
	if (USE_EMISSION_BUFFER)
		g4 = encodeGBuffer4(gBuffer.emissiveColor, gBuffer.emissiveFactor);
	#endif
	#ifdef USE_MOTION_VECTORS
	if (USE_VELOCITY_BUFFER)
		g5 = encodeGBuffer5(gBuffer.velocity);
	#endif
}

#define ENCODE_G_BUFFER_VALUES(gBuffer) encodeGBufferValues(gBuffer, fb_g0, fb_g1, fb_g2, fb_g3, fb_g4, fb_g5)

//**********************************************************************************************************************
float3 decodeBaseColor(float4 gBufferData) { return gBufferData.rgb; }
float decodeSpecularFactor(float4 gBufferData) { return gBufferData[G_BUFFER_SPEC_FACTOR_COMP]; }
float decodeMetallic(float4 gBufferData) { return gBufferData[G_BUFFER_METALLIC_COMP]; }
float decodeRoughness(float4 gBufferData) { return gBufferData[G_BUFFER_ROUGHNESS_COMP]; }
float decodeAmbientOcclusion(float4 gBufferData) { return gBufferData[G_BUFFER_MATERIAL_AO_COMP]; }
float decodeReflectance(float4 gBufferData) { return gBufferData[G_BUFFER_REFLECTANCE_COMP]; }
float3 decodeClearCoatNormal(float4 gBufferData) { return decodeNormalOct(gBufferData.gba); }
float decodeClearCoatRoughness(float4 gBufferData) { return gBufferData[G_BUFFER_CC_ROUGHNESS_COMP]; }
float3 decodeNormal(float4 gBufferData) { return decodeNormalOct(gBufferData.gba); }
float decodeShadow(float4 gBufferData) { return gBufferData[G_BUFFER_SHADOW_COMP]; }
float3 decodeEmissiveColor(float4 gBufferData) { return gBufferData.rgb; }
float decodeEmissiveFactor(float4 gBufferData) { return gBufferData[G_BUFFER_EM_FACTOR_COMP]; }
float2 decodeVelocity(float4 gBufferData) { return gBufferData.rg; }

float3 decodeBaseColor(const GBufferData data) { return decodeBaseColor(data.g[G_BUFFER_BASE_COLOR]); }
float decodeSpecularFactor(const GBufferData data) { return decodeSpecularFactor(data.g[G_BUFFER_SPEC_FACTOR]); }
float decodeMetallic(const GBufferData data) { return decodeMetallic(data.g[G_BUFFER_METALLIC]); }
float decodeRoughness(const GBufferData data) { return decodeRoughness(data.g[G_BUFFER_ROUGHNESS]); }
float decodeAmbientOcclusion(const GBufferData data) { return decodeAmbientOcclusion(data.g[G_BUFFER_MATERIAL_AO]); }
float decodeReflectance(const GBufferData data) { return decodeReflectance(data.g[G_BUFFER_REFLECTANCE]); }
float3 decodeClearCoatNormal(const GBufferData data) { return decodeClearCoatNormal(data.g[G_BUFFER_CC_NORMALS]); }
float decodeClearCoatRoughness(const GBufferData data) { return decodeClearCoatRoughness(data.g[G_BUFFER_CC_ROUGHNESS]); }
float3 decodeNormal(const GBufferData data) { return decodeNormal(data.g[G_BUFFER_NORMALS]); }
float decodeShadow(const GBufferData data) { return decodeShadow(data.g[G_BUFFER_SHADOW]); }
float3 decodeEmissiveColor(const GBufferData data) { return decodeEmissiveColor(data.g[G_BUFFER_EM_COLOR]); }
float decodeEmissiveFactor(const GBufferData data) { return decodeEmissiveFactor(data.g[G_BUFFER_EM_FACTOR]); }
float2 decodeVelocity(const GBufferData data) { return decodeVelocity(data.g[G_BUFFER_VELOCITY]); }

//**********************************************************************************************************************
GBufferData decodeGBufferData(sampler2D s0, sampler2D s1, sampler2D s2, 
	sampler2D s3, sampler2D s4, sampler2D s5, float2 texCoords)
{
	GBufferData data;
	data.g[0] = textureLod(s0, texCoords, 0.0f);
	data.g[1] = textureLod(s1, texCoords, 0.0f);
	data.g[2] = textureLod(s2, texCoords, 0.0f);

	#ifdef USE_CLEAR_COAT
	if (USE_CLEAR_COAT_BUFFER)
		data.g[3] = textureLod(s3, texCoords, 0.0f);
	#endif
	#ifdef USE_LIGHT_EMISSION
	if (USE_EMISSION_BUFFER)
		data.g[4] = textureLod(s4, texCoords, 0.0f);
	#endif
	#ifdef USE_MOTION_VECTORS
	if (USE_VELOCITY_BUFFER)
		data.g[5] = textureLod(s5, texCoords, 0.0f);
	#endif
	return data;
}
GBufferValues decodeGBufferValues(sampler2D s0, sampler2D s1, sampler2D s2, 
	sampler2D s3, sampler2D s4, sampler2D s5, float2 texCoords)
{
	GBufferData data = decodeGBufferData(s0, s1, s2, s3, s4, s5, texCoords);

	GBufferValues gBuffer;
	gBuffer.viewDirection = float3(0.0f, 0.0f, -1.0f);
	gBuffer.baseColor = decodeBaseColor(data);
	#ifdef USE_SPECULAR_FACTOR
	gBuffer.specularFactor = decodeSpecularFactor(data);
	#else
	gBuffer.baseAlpha = decodeSpecularFactor(data);
	#endif
	gBuffer.metallic = decodeMetallic(data);
	gBuffer.roughness = decodeRoughness(data);
	#ifdef USE_AMBIENT_OCCLUSION
	gBuffer.ambientOcclusion = decodeAmbientOcclusion(data);
	#endif
	gBuffer.reflectance = decodeReflectance(data);
	gBuffer.normal = decodeNormal(data);
	#ifdef USE_LIGHT_SHADOW
	gBuffer.shadow = float4(float3(1.0f), decodeShadow(data));
	#endif
	#ifdef USE_LIGHT_ABSORPTION
	gBuffer.refractedColor = float3(0.0f);
	gBuffer.absorptionColor = float3(0.0f);
	gBuffer.transmission = 0.0f;
	#endif
	#ifdef USE_CLEAR_COAT
	if (USE_CLEAR_COAT_BUFFER)
	{
		gBuffer.clearCoatNormal = decodeClearCoatNormal(data);
		gBuffer.clearCoatRoughness = decodeClearCoatRoughness(data);
	}
	#endif
	#ifdef USE_LIGHT_EMISSION
	if (USE_EMISSION_BUFFER)
	{
		gBuffer.emissiveColor = decodeEmissiveColor(data);
		gBuffer.emissiveFactor = decodeEmissiveFactor(data);
	}
	#endif
	#ifdef USE_SUBSURFACE_SCATTERING
	gBuffer.subsurfaceColor = float3(0.0f);
	#endif
	#ifdef USE_REFLECTIONS
	gBuffer.reflectionColor = float4(0.0f);
	#endif
	#ifdef USE_GLOBAL_ILLUMINATION
	gBuffer.giColor = float3(1.0f);
	#endif
	#ifdef USE_MOTION_VECTORS
	gBuffer.velocity = decodeVelocity(data);
	#endif
	#if defined(USE_LIGHT_ABSORPTION) || defined(USE_SUBSURFACE_SCATTERING)
	gBuffer.thickness = 1.0f;
	#endif
	return gBuffer;
}

#endif // GBUFFER_GSL